{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"fuzzy-couscous \u00b6 \u2728\ud83d\udcda\u2728 Read the full documentation A cli tool based on django's startproject --template to bootstrap your django projects with a modern stack. The project template is heavily inspired by cookiecutter-django but is meant to be a simpler version. The cli also comes with additional commands to hopefully improve your django development experience. Features \u00b6 Django 4+ Python 3.10+ Frontend: htmx with editor support using web-types Template fragment with django-template-partials Secure production settings, https only. Settings using django-environ Login / signup via django-allauth Custom user model based on django-improved-user Login using email instead of username Automatically reload your browser in development via django-browser-reload Better development experience with django-fastdev Amazon SES for production email via Anymail Docker ready for production Optional production cache settings using the CACHE_URL or REDIS_URL environment variables. captain-definition for deploying to caprover Sentry for performance/error monitoring Serve static files with Whitenoise Default integration with pre-commit for identifying simple issues before submission to code review Integrated task runner with poethepoet Dependency management using poetry (can be replaced by virtualenv using the remove-poetry command ) Templates \u00b6 I use github branches to create variations of the base template. main : The base template tailwind : The base template + tailwindcss via pytailwindcss bootstrap : The base template + bootstrap5 via django-bootstrap5 Note : If some of my decisions about the project template don't make sense to you, read this section of the documentation. Quickstart \u00b6 Install the latest version of the package 1 pip install fuzzy-couscous --upgrade Initialize a new project 1 cuzzy make project_name Development \u00b6 Poetry is required (not really, you can set up the environment however you want and install the requirements manually) to set up a virtualenv, install it then run the following: 1 pre-commit install --install-hooks Tests can then be run quickly in that environment: 1 pytest Feedback \u00b6 If you have any feedback, please reach out to me at tobidegnon@proton.me or open a discussion . Contributors \u00b6","title":"Home"},{"location":"#fuzzy-couscous","text":"\u2728\ud83d\udcda\u2728 Read the full documentation A cli tool based on django's startproject --template to bootstrap your django projects with a modern stack. The project template is heavily inspired by cookiecutter-django but is meant to be a simpler version. The cli also comes with additional commands to hopefully improve your django development experience.","title":"fuzzy-couscous"},{"location":"#features","text":"Django 4+ Python 3.10+ Frontend: htmx with editor support using web-types Template fragment with django-template-partials Secure production settings, https only. Settings using django-environ Login / signup via django-allauth Custom user model based on django-improved-user Login using email instead of username Automatically reload your browser in development via django-browser-reload Better development experience with django-fastdev Amazon SES for production email via Anymail Docker ready for production Optional production cache settings using the CACHE_URL or REDIS_URL environment variables. captain-definition for deploying to caprover Sentry for performance/error monitoring Serve static files with Whitenoise Default integration with pre-commit for identifying simple issues before submission to code review Integrated task runner with poethepoet Dependency management using poetry (can be replaced by virtualenv using the remove-poetry command )","title":"Features"},{"location":"#templates","text":"I use github branches to create variations of the base template. main : The base template tailwind : The base template + tailwindcss via pytailwindcss bootstrap : The base template + bootstrap5 via django-bootstrap5 Note : If some of my decisions about the project template don't make sense to you, read this section of the documentation.","title":"Templates"},{"location":"#quickstart","text":"Install the latest version of the package 1 pip install fuzzy-couscous --upgrade Initialize a new project 1 cuzzy make project_name","title":"Quickstart"},{"location":"#development","text":"Poetry is required (not really, you can set up the environment however you want and install the requirements manually) to set up a virtualenv, install it then run the following: 1 pre-commit install --install-hooks Tests can then be run quickly in that environment: 1 pytest","title":"Development"},{"location":"#feedback","text":"If you have any feedback, please reach out to me at tobidegnon@proton.me or open a discussion .","title":"Feedback"},{"location":"#contributors","text":"","title":"Contributors"},{"location":"codeofconduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at tobidegnon@proton.me . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"codeofconduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"codeofconduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"codeofconduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"codeofconduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"codeofconduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"codeofconduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at tobidegnon@proton.me . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"codeofconduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"codeofconduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"codeofconduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"codeofconduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"codeofconduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"codeofconduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"deployment/","text":"This template was configured to simplify deployment on caprover , since that is what I use 99% of the time. Quote CapRover is an extremely easy to use app/database deployment & web server manager for your NodeJS, Python, PHP, ASP.NET, Ruby, MySQL, MongoDB, Postgres, WordPress (and etc...) applications! Official site CapRover is a self-hosted PaaS solution, think heroku but on your own servers. Nowadays, I tend to prefer PaaS solutions over manual deployment and configuration, as they are easy to use with little configuration to deploy most apps. Software is usually quite a pain to deploy and even though I've gotten better at it over time, I'll always choose a managed solution over manual deployment. Some other options than CapRover are: Dokku (self hosted) Fly (hosted) Render (hosted) Coolify (self hosted) DigitalOcean App Platform (hosted) AWS Elastic Beanstalk (hosted) Btn (hosted and not ready yet) Info I recently discovered django-simple-deploy which can configure your django project for some of the alternatives to caprover I listed above. I find that self-hosted solutions are generally cheaper than managed/hosted solutions, but I don't have much experience with managed solutions, so I could be wrong, do your own research and if you can afford it, try them out to see what works best for you. After installing CaProver with the getting started guide , there is not much left to do, create a new application and in the section deployment . configure your application using the third method Method 3: Deploy from Github/Bitbucket/Gitlab . Info If you use github, instead of entering your password directly into the password field, you can use a personal access token , which is a more secure option. Tip Checkout caprover automatic deploy to automate the deployment of your applications.","title":"Deployment"},{"location":"documentation/","text":"This template does not include a documentation setup, but it is very important for most projects (at least it should be) to have a documentation site, especially if you are not working alone. Here are the options I would suggest for setting up a documentation, recently I tend to favor the first one. Mkdocs with the Material theme Sphinx with the Furo theme There is a chance that in the future I will include the docs directly in the template but for now here is a quick guide to configure mkdocs with the material theme: Installation and configurations \u00b6 Copy the configuration below into your pyproject.toml file under the [tool.poetry.dependencies] section. 1 2 3 4 5 6 7 8 [tool.poetry.group.docs] optional = true [tool.poetry.group.docs.dependencies] mkdocs = \"^1.4.2\" mkdocs-material = \"^8.5.10\" mkdocs-material-extensions = \"^1.1.1\" mkdocs-include-markdown-plugin = \"3.9.1\" Install the new dependencies. 1 poetry install --with docs Create your new mkdocs site. 1 mkdocs new . Update the mkdocs.yml file to specify the material theme, your configuration should look like this: 1 2 3 site_name : My Docs # change this to the name of your project theme : name : material Run the documentation site locally 1 mkdocs serve If you noticed, the dependencies added above via the section [tool.poetry.group.docs.dependencies] include more than just mkdocs and the material theme, specifically : mkdocs-material-extensions : Markdown extension resources for MkDocs for Material mkdocs-include-markdown-plugin : Include other markdown files in your mkdocs site For a complete example of how I configure them in projects, see this configuration file . Deploy your documentation \u00b6 Mkdocs can turn your documentation into a static site that you can host anywhere, netlify , github pages , etc. To build your site, run the command below and you will have a new site directory at the root of your project: 1 mkdocs build This folder contains everything that is necessary to deploy your static site. If you choose the github pages route, you can automate the process with github actions , the official mkdocs-material documentation explains how to do it . To use github actions, you will probably need a requirements.txt file, you can generate one with only what is needed to build the docs with the command below. 1 poetry export -f requirements.txt --output docs/requirements.txt --without-hashes --only docs Read the mkdocs and mkdocs-material docs for more advanced configurations and details on what is possible.","title":"Documentation"},{"location":"documentation/#installation-and-configurations","text":"Copy the configuration below into your pyproject.toml file under the [tool.poetry.dependencies] section. 1 2 3 4 5 6 7 8 [tool.poetry.group.docs] optional = true [tool.poetry.group.docs.dependencies] mkdocs = \"^1.4.2\" mkdocs-material = \"^8.5.10\" mkdocs-material-extensions = \"^1.1.1\" mkdocs-include-markdown-plugin = \"3.9.1\" Install the new dependencies. 1 poetry install --with docs Create your new mkdocs site. 1 mkdocs new . Update the mkdocs.yml file to specify the material theme, your configuration should look like this: 1 2 3 site_name : My Docs # change this to the name of your project theme : name : material Run the documentation site locally 1 mkdocs serve If you noticed, the dependencies added above via the section [tool.poetry.group.docs.dependencies] include more than just mkdocs and the material theme, specifically : mkdocs-material-extensions : Markdown extension resources for MkDocs for Material mkdocs-include-markdown-plugin : Include other markdown files in your mkdocs site For a complete example of how I configure them in projects, see this configuration file .","title":"Installation and configurations"},{"location":"documentation/#deploy-your-documentation","text":"Mkdocs can turn your documentation into a static site that you can host anywhere, netlify , github pages , etc. To build your site, run the command below and you will have a new site directory at the root of your project: 1 mkdocs build This folder contains everything that is necessary to deploy your static site. If you choose the github pages route, you can automate the process with github actions , the official mkdocs-material documentation explains how to do it . To use github actions, you will probably need a requirements.txt file, you can generate one with only what is needed to build the docs with the command below. 1 poetry export -f requirements.txt --output docs/requirements.txt --without-hashes --only docs Read the mkdocs and mkdocs-material docs for more advanced configurations and details on what is possible.","title":"Deploy your documentation"},{"location":"license/","text":"MIT License Copyright (c) 2022 Tobi DEGNON Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"project/","text":"This page gives more details about the structure, layouts and packages used for the project template and therefore available in your generated project. Login via email instead of username \u00b6 I completely removed the username field from the User model and replaced it with the email field as the user unique identifier. This email field is what I configured as the login field via django-allauth . More often then not when I create a new django project I need to use something other than the username field provided by django as the unique identifier of the user, and the username field just becomes an annoyance to deal with. It is also more common nowadays for modern web and mobile applications to rely on a unique identifier such as an email address or phone number instead of a username. The project also includes django-improved-user which replaces the common first_name and last_name used for user details with full_name and the short_name fields. If you want to know the reasoning behind this, read the project rationale . Currently, the latest version of django-improved-user that works without problems is an alpha version (v2.0a2). This can be annoying to deal with when updating dependencies, you can get the same result as I just described with the django-authtools package. Don't ask for what you don't need Make sure you need first_name - last_name or short_name - full_name before asking your users for this information. rezaid.co.uk The less customer information you hold, the more your chances are of becoming GDPR compliant. However, this does not mean that you let go of relevant data. It is important is to always ask: Do you need it? If you ever decide you need them you can always request them later If on the other hand you don't agree with what I just wrote or for the particular project you are currently working on my configuration doesn't work for you, removing django-improved-user should be an easy change. First update the User models to inherit from django AbstractUser instead of the django-improved-ser one. 1 2 3 4 5 6 # users/models.py from django.contrib.auth.models import AbstractUser class User ( AbstractUser ): pass Then delete the forms.py , admin.py and migrations/0001_initial.py files in the users app. With that you should be good to go, if you want something a little more complete to start with you can grab some code from the cookiecutter-django users app . DjangoFastDev \u00b6 Occasionally you may see a FastDevVariableDoesNotExist error, this exception is thrown during template rendering by django-fastdev when you try to access a variable that is not defined in the context context of the view associated with that template. This is intended to help you avoid typos and small errors that will have you scratching your head for hours, read the project readme if you want more reasons to why it make sense to use it. But since this can be annoying for some people, you can disable it by removing django-fastdev entirely or by commenting out the django-fastdev application in the settings.py file. 1 2 3 4 THIRD_PARTY_APPS = [ ... # 'django_fastdev', ] Dependencies management \u00b6 If you are using poetry then you probably already knows what to do, using poetry is pretty straightforward and that's why I like it. With poetry the simplest workflow looks something like this: 1 2 3 poetry install poetry add package_name poetry remove package_name Updating your dependencies I recommend the poetry-plugin-up to easily update your dependencies. I used to include poetryup in the project template, but that has been deprecated in favor of the new up plugin . If on the other hand you choose to remove poetry using the cuzzy remove-poetry and additionally created a virtualenv with the -c option, then I've added a few things that might be useful to you. The pyproject.toml file \u00b6 When I first started using poetry I thought this file was a poetry specific thing, but it turns out that it is not. The pyproject.toml file is a python standard introduced to unify and simplify python project packaging and configurations. The pip documentation gives much more details on this than I can cover here, so I will just link to it here . A loot of tools in the python ecosystem support it and it seems this is what we are going to be using in the future so I've kept it. Pip-tools \u00b6 When you run the remove-poetry with the -c option which create a virtual environment for you, you will also get pip-tools and hatch installed. Pip-tools is a set of tools to help you manage your dependencies. As the name suggests, it is based on pip. The most basic workflow will look something like this: Add a new package in your pyproject.toml (or requirements.ini if you prefer) file and run pip-compile to generate a new requirements.txt file. 1 pip-tools compile -o requirements.txt pyproject.toml --resolver = backtracking The command also take an --extra option to specify dependencies groups, more infos on their github readme . 1 pip-sync pip-sync will synchronize your virtual environment with the requirements.txt file, this means that any package in the virtual environment that is not in the requirements.txt file will be removed. You can also just use a good old python -m pip install -r requirements.txt to install the dependencies. Hatch \u00b6 Installed at the same time as pip-tools , Hatch is the build system specified in the pyproject.toml file. Since you are probably not going to package and publish your django project you don't really need it, but pip-tools does need a build system defined to work. Official hatch documentation Hatch is a modern, extensible Python project manager. Hatch does everything you need to manage a python project, dependencies, virtual environments, packaging, publishing, scripts, etc and it also uses the pyproject.toml file. The one available after the remove-poetry command is a good base to start using hatch. Just run 1 hatch env create Read the hatch documentation for more infos.","title":"Project"},{"location":"project/#login-via-email-instead-of-username","text":"I completely removed the username field from the User model and replaced it with the email field as the user unique identifier. This email field is what I configured as the login field via django-allauth . More often then not when I create a new django project I need to use something other than the username field provided by django as the unique identifier of the user, and the username field just becomes an annoyance to deal with. It is also more common nowadays for modern web and mobile applications to rely on a unique identifier such as an email address or phone number instead of a username. The project also includes django-improved-user which replaces the common first_name and last_name used for user details with full_name and the short_name fields. If you want to know the reasoning behind this, read the project rationale . Currently, the latest version of django-improved-user that works without problems is an alpha version (v2.0a2). This can be annoying to deal with when updating dependencies, you can get the same result as I just described with the django-authtools package. Don't ask for what you don't need Make sure you need first_name - last_name or short_name - full_name before asking your users for this information. rezaid.co.uk The less customer information you hold, the more your chances are of becoming GDPR compliant. However, this does not mean that you let go of relevant data. It is important is to always ask: Do you need it? If you ever decide you need them you can always request them later If on the other hand you don't agree with what I just wrote or for the particular project you are currently working on my configuration doesn't work for you, removing django-improved-user should be an easy change. First update the User models to inherit from django AbstractUser instead of the django-improved-ser one. 1 2 3 4 5 6 # users/models.py from django.contrib.auth.models import AbstractUser class User ( AbstractUser ): pass Then delete the forms.py , admin.py and migrations/0001_initial.py files in the users app. With that you should be good to go, if you want something a little more complete to start with you can grab some code from the cookiecutter-django users app .","title":"Login via email instead of username"},{"location":"project/#djangofastdev","text":"Occasionally you may see a FastDevVariableDoesNotExist error, this exception is thrown during template rendering by django-fastdev when you try to access a variable that is not defined in the context context of the view associated with that template. This is intended to help you avoid typos and small errors that will have you scratching your head for hours, read the project readme if you want more reasons to why it make sense to use it. But since this can be annoying for some people, you can disable it by removing django-fastdev entirely or by commenting out the django-fastdev application in the settings.py file. 1 2 3 4 THIRD_PARTY_APPS = [ ... # 'django_fastdev', ]","title":"DjangoFastDev"},{"location":"project/#dependencies-management","text":"If you are using poetry then you probably already knows what to do, using poetry is pretty straightforward and that's why I like it. With poetry the simplest workflow looks something like this: 1 2 3 poetry install poetry add package_name poetry remove package_name Updating your dependencies I recommend the poetry-plugin-up to easily update your dependencies. I used to include poetryup in the project template, but that has been deprecated in favor of the new up plugin . If on the other hand you choose to remove poetry using the cuzzy remove-poetry and additionally created a virtualenv with the -c option, then I've added a few things that might be useful to you.","title":"Dependencies management"},{"location":"project/#the-pyprojecttoml-file","text":"When I first started using poetry I thought this file was a poetry specific thing, but it turns out that it is not. The pyproject.toml file is a python standard introduced to unify and simplify python project packaging and configurations. The pip documentation gives much more details on this than I can cover here, so I will just link to it here . A loot of tools in the python ecosystem support it and it seems this is what we are going to be using in the future so I've kept it.","title":"The pyproject.toml file"},{"location":"project/#pip-tools","text":"When you run the remove-poetry with the -c option which create a virtual environment for you, you will also get pip-tools and hatch installed. Pip-tools is a set of tools to help you manage your dependencies. As the name suggests, it is based on pip. The most basic workflow will look something like this: Add a new package in your pyproject.toml (or requirements.ini if you prefer) file and run pip-compile to generate a new requirements.txt file. 1 pip-tools compile -o requirements.txt pyproject.toml --resolver = backtracking The command also take an --extra option to specify dependencies groups, more infos on their github readme . 1 pip-sync pip-sync will synchronize your virtual environment with the requirements.txt file, this means that any package in the virtual environment that is not in the requirements.txt file will be removed. You can also just use a good old python -m pip install -r requirements.txt to install the dependencies.","title":"Pip-tools"},{"location":"project/#hatch","text":"Installed at the same time as pip-tools , Hatch is the build system specified in the pyproject.toml file. Since you are probably not going to package and publish your django project you don't really need it, but pip-tools does need a build system defined to work. Official hatch documentation Hatch is a modern, extensible Python project manager. Hatch does everything you need to manage a python project, dependencies, virtual environments, packaging, publishing, scripts, etc and it also uses the pyproject.toml file. The one available after the remove-poetry command is a good base to start using hatch. Just run 1 hatch env create Read the hatch documentation for more infos.","title":"Hatch"},{"location":"tips/","text":"This section gathers tips, copy and paste configurations and package recommendations that I use quite often in my projects to solve specific problems. Settings \u00b6 If there is a setting in settings.py or elsewhere that you don't understand, go to the official django settings reference page and press Ctrl + F to search for it. I used the django-production package to configure the production settings which I then customized. I have removed the package as a dependency, but I advise you to go and check for yourself what is available. Dynamic web pages \u00b6 HTMX for simple interactive elements, django-unicorn if I need something more integrated with django. It's not a binary choice, you can use both, the main advantage for me is the simplicity compared to a frontend javascript framework. Note If you use htmx boost + debug toolbar (already included in the template), you will need this . Task queues and schedulers \u00b6 Task queues are used to offload tasks to a dedicated worker process when the processing of those tasks does not fit into a traditional request-response cycle. Basically, if you need to do something that might take too long to process and whose result does not need to be shown immediately to the user, you use a queue manager. Schedulers are used to periodically run tasks. There are many options available in the django third-party ecosystem , some focus solely on providing a task queue, others are just schedulers and many of them provide both in one package. You can also search for purely python solutions and integrate them into your django project yourself. I prefer options that do not require additional infrastructure (redis, rabbitmq, etc.) for simple tasks. For more complex tasks, I tend to choose a solution that supports redis as a task broker. Doesn't require setup of external tools, redis, rabbitmq, etc.. django-q2 : Task queue + scheduler django-chard : Task queue django-pgpubsub : Task queue procrastinate : Task queue + scheduler rocketry : Scheduler Require the setup of external tools, redis, rabbitmq, etc. django-dramatiq : Task queue django-rq : Task queue + scheduler via django-rq-scheduler wakaq : Task queue + scheduler Note The order matters, that's the order in which I would choose one of these packages. Media storage \u00b6 Media files in django usually refer to files uploaded by users, profile pictures, product images, etc. I usually manage my media files using django-storages . Here is how I set it up. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # core/storages.py from storages.backends.s3boto3 import S3Boto3Storage class MediaRootS3Boto3Storage ( S3Boto3Storage ): location = \"media\" file_overwrite = False # settings.py - production settings AWS_ACCESS_KEY_ID = env ( \"DJANGO_AWS_ACCESS_KEY_ID\" ) AWS_SECRET_ACCESS_KEY = env ( \"DJANGO_AWS_SECRET_ACCESS_KEY\" ) AWS_STORAGE_BUCKET_NAME = env ( \"DJANGO_AWS_STORAGE_BUCKET_NAME\" ) DEFAULT_FILE_STORAGE = \"project_name.core.storages.MediaRootS3Boto3Storage\" MEDIA_URL = f \"https:// { AWS_STORAGE_BUCKET_NAME } .s3.amazonaws.com/media/\" Database backup \u00b6 Whenever possible, take advantage of a fully managed database solution, they usually offer automatic backup of your databases. In my opinion, this is the best option if you don't want to deal with the hassle of managing your own database. Amazon RDS Linode Managed Databases DigitalOcean Managed Databases Heroku postgres For specific postgresql options, see their hosting support page . However, if for some reason you want / need to manage your database yourself and just want an automatic backup solution then django-dbbackup is what you need. You can use one of the scheduling packages discussed above to periodically run the backup command. Health check your django project \u00b6 Health check is about making sure that your django application and related services are always available / running. My go-to package for this is django-health-check . After installing and configuring django-health-check , you need to associate it with an uptime monitoring service, this is the service that will periodically call your health-check endpoint to make sure everything is fine. Here is a list of available options. upptime uptime-kuma uptimerobot better-uptime glitchtip Read more on the health check pattern here . Extra that I haven't tried myself yet \u00b6 django-linear-migrations : Read introduction post django-read-only : Disable Django database writes.","title":"Tips"},{"location":"tips/#settings","text":"If there is a setting in settings.py or elsewhere that you don't understand, go to the official django settings reference page and press Ctrl + F to search for it. I used the django-production package to configure the production settings which I then customized. I have removed the package as a dependency, but I advise you to go and check for yourself what is available.","title":"Settings"},{"location":"tips/#dynamic-web-pages","text":"HTMX for simple interactive elements, django-unicorn if I need something more integrated with django. It's not a binary choice, you can use both, the main advantage for me is the simplicity compared to a frontend javascript framework. Note If you use htmx boost + debug toolbar (already included in the template), you will need this .","title":"Dynamic web pages"},{"location":"tips/#task-queues-and-schedulers","text":"Task queues are used to offload tasks to a dedicated worker process when the processing of those tasks does not fit into a traditional request-response cycle. Basically, if you need to do something that might take too long to process and whose result does not need to be shown immediately to the user, you use a queue manager. Schedulers are used to periodically run tasks. There are many options available in the django third-party ecosystem , some focus solely on providing a task queue, others are just schedulers and many of them provide both in one package. You can also search for purely python solutions and integrate them into your django project yourself. I prefer options that do not require additional infrastructure (redis, rabbitmq, etc.) for simple tasks. For more complex tasks, I tend to choose a solution that supports redis as a task broker. Doesn't require setup of external tools, redis, rabbitmq, etc.. django-q2 : Task queue + scheduler django-chard : Task queue django-pgpubsub : Task queue procrastinate : Task queue + scheduler rocketry : Scheduler Require the setup of external tools, redis, rabbitmq, etc. django-dramatiq : Task queue django-rq : Task queue + scheduler via django-rq-scheduler wakaq : Task queue + scheduler Note The order matters, that's the order in which I would choose one of these packages.","title":"Task queues and schedulers"},{"location":"tips/#media-storage","text":"Media files in django usually refer to files uploaded by users, profile pictures, product images, etc. I usually manage my media files using django-storages . Here is how I set it up. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # core/storages.py from storages.backends.s3boto3 import S3Boto3Storage class MediaRootS3Boto3Storage ( S3Boto3Storage ): location = \"media\" file_overwrite = False # settings.py - production settings AWS_ACCESS_KEY_ID = env ( \"DJANGO_AWS_ACCESS_KEY_ID\" ) AWS_SECRET_ACCESS_KEY = env ( \"DJANGO_AWS_SECRET_ACCESS_KEY\" ) AWS_STORAGE_BUCKET_NAME = env ( \"DJANGO_AWS_STORAGE_BUCKET_NAME\" ) DEFAULT_FILE_STORAGE = \"project_name.core.storages.MediaRootS3Boto3Storage\" MEDIA_URL = f \"https:// { AWS_STORAGE_BUCKET_NAME } .s3.amazonaws.com/media/\"","title":"Media storage"},{"location":"tips/#database-backup","text":"Whenever possible, take advantage of a fully managed database solution, they usually offer automatic backup of your databases. In my opinion, this is the best option if you don't want to deal with the hassle of managing your own database. Amazon RDS Linode Managed Databases DigitalOcean Managed Databases Heroku postgres For specific postgresql options, see their hosting support page . However, if for some reason you want / need to manage your database yourself and just want an automatic backup solution then django-dbbackup is what you need. You can use one of the scheduling packages discussed above to periodically run the backup command.","title":"Database backup"},{"location":"tips/#health-check-your-django-project","text":"Health check is about making sure that your django application and related services are always available / running. My go-to package for this is django-health-check . After installing and configuring django-health-check , you need to associate it with an uptime monitoring service, this is the service that will periodically call your health-check endpoint to make sure everything is fine. Here is a list of available options. upptime uptime-kuma uptimerobot better-uptime glitchtip Read more on the health check pattern here .","title":"Health check your django project"},{"location":"tips/#extra-that-i-havent-tried-myself-yet","text":"django-linear-migrations : Read introduction post django-read-only : Disable Django database writes.","title":"Extra that I haven't tried myself yet"},{"location":"usage/","text":"This page describe how to use the all available commands. Intro \u00b6 Note fuzzy-couscous is the name of the cli installed when you install this package but since it's a bit annoying to type it every time, there is the short version cuzzy that you can use instead. The short version is the one that is used throughout the documentation for the examples. Since this template uses django's startproject --template , you can easily clone the project on your computer and generate a django project by using the command django-admin and specifying the fuzzy-couscous/templates/project_name folder as the template. The final command is a bit long, that's why I made this cli to simplify the process. The cli command is installed together with the package. Install the package 1 pip install fuzzy-couscous --upgrade cuzzy \u00b6 Usage : 1 $ cuzzy [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show the help message and exit. Commands : make : Initialize a new django project. remove-poetry : Run this command to remove poetry as a dependency from your project. work : Run multiple commands in parallel. write-env : Update or create a .env file from a .env.template file. cuzzy make \u00b6 Initialize a new django project. This template makes a lot of assumptions, if you want to make some adjustments to the template you can fork the github repository of this project and make your changes in the templates folder, you can then use the --repo option to specify your Github repository. Custom repository Actually you don't need to fork my repository, you can use this command on any github repository hosting a django project template as long as the template is defined in a templates folder in the root of the repository. Basically, the github repository structure would look something like this: 1 2 3 4 5 ```shell . \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 project_name ``` Usage : 1 $ cuzzy make [ OPTIONS ] PROJECT_NAME Info The authors key of the [tool.poetry] section in the pyproject.toml is set using your git global user configuration. If you haven't set it yet, see this page . Arguments : PROJECT_NAME : [required] Options : -r, --repo TEXT : The github repository to pull the template from. The format to use is username/repo [default: Tobi-De/fuzzy-couscous] -b, --branch [main|tailwind|bootstrap] : The github branch to use. [default: main] -s, --skip-install : Skip dependencies installation. [default: False] --help : Show the help message and exit. cuzzy remove-poetry \u00b6 Run this command to remove poetry as a dependency from your project, it updates your pyproject.toml file to use hatch as the build system and can optionally create a virtual environment using virtualenv . Hatch is a modern and extensible Python project manager, it can handle environment creation, package publishing, versioning, etc, everything you need to manage a python project, but here I chose to use it only as a build backend. If you add the --create-virtualenv option, pip-tools will be installed in the created environment, you can use it to manage your dependencies. If you are familiar with hatch, you can easily complete the hatch configurations from the generated pyproject.toml file and use it instead of virtualenv to manage your project. Info The virtualenv is created using your global python interpreter. Warning Be sure to commit your changes before running this command, that way you can undo the changes if something goes wrong or if you simply change your mind Usage : 1 $ cuzzy remove-poetry [ OPTIONS ] Options : -c, --create-virtualenv : Create an environment using virtualenv. [default: False] --help : Show the help message and exit. cuzzy work \u00b6 This command allows you to run multiple commands simultaneously. Typically, when working with tailwind, you need to run both the django runserver command and the tailwind compile command. This command uses the python package honcho to manage multiple processes. By default, it runs the django server, a redis server (if REDIS_URL is in your environment or .env file), and the tailwind compile and watch command if pytailwindcss is listed as a dependency in your pyproject.toml file. You can specify the commands to run in the [tool.cuzzy] section using the work key. If you define a command with the same name as the default, it will override it. Here are the default commands: 1 2 [tool.cuzzy] work = { server = \"python manage.py migrate && python manage.py runserver --nostatic\" , tailwind = \"tailwindcss -i project_name/static/css/input.css -o project_name/static/css/output.css --watch\" , redis = \"redis-server\" } Usage : 1 $ cuzzy work [ OPTIONS ] Options : --dry-run : Display the list of commands without running them. [default: False] --help : Show the help message and exit. Can be configured via the pyproject.toml file. 1 2 [tool.cuzzy] work = { server = \"python manage.py runserver --nostatic\" , \"tailwind\" = \"poe t\" , \"worker\" = \"python manage.py qcluster\" } cuzzy write-env \u00b6 Running this will create a new .env by filling the file with the keys and values from the following options: a env.template file, used if it exists a DEFAULT_VALUES dictionary, internal to the fuzzy-couscous package, contains some default for common keys, DJANGO_DEBUG , DJANGO_SECRET_KEY , etc. a .env file, used if it exists The order defines the priority of the values that are used, which means that the values contained in your original .env file are preserved if the file exists. Usage : 1 $ cuzzy write-env [ OPTIONS ] Options : -f, --fill-missing : Prompt to fill missing values. [default: False] -o, --output-file FILE : The output file path. [default: .env] -p, --postgres-pass : Prompt for the postgres password to use to build the DATABASE_URL . --help : Show the help message and exit. cuzzy rm-migrations \u00b6 Note This command was previously part of the generated project as a django management command, but I decided to move it to the fuzzy-couscous package since I'm probably the only one using it and I don't want to pollute the generated project with unnecessary code. Remove all migrations for the specified applications directory, intended only for development. Warning This command will delete all your migrations files, be sure to commit your changes before running this command. Usage : 1 $ cuzzy rm-migrations [ OPTIONS ] APPS_DIR Arguments : APPS_DIR : The path to your django apps directory. [required] Options : -e, --exclude TEXT : A file to exclude from the deletion. This option can be repeated. cuzzy htmx \u00b6 Download the htmx javascript library or one of its extension if specified. You won't have to download htmx or its extensions often but at least if you need it, I think this is an easy way to get the file available locally. Usage : 1 $ cuzzy htmx [ OPTIONS ] VERSION Arguments : VERSION : The version of htmx to download. [default: latest] Options : -e, --extension TEXT : The name of the extension to download. -f, --output-file TEXT : The filename for the htmx download. [default: htmx.min.js] -d, --output-dir DIRECTORY : The directory to write the downloaded file to, default to the current working directory. -w, --web-types : Download the web-types file. --help : Show the help message and exit.","title":"Usage"},{"location":"usage/#intro","text":"Note fuzzy-couscous is the name of the cli installed when you install this package but since it's a bit annoying to type it every time, there is the short version cuzzy that you can use instead. The short version is the one that is used throughout the documentation for the examples. Since this template uses django's startproject --template , you can easily clone the project on your computer and generate a django project by using the command django-admin and specifying the fuzzy-couscous/templates/project_name folder as the template. The final command is a bit long, that's why I made this cli to simplify the process. The cli command is installed together with the package. Install the package 1 pip install fuzzy-couscous --upgrade","title":"Intro"},{"location":"usage/#cuzzy","text":"Usage : 1 $ cuzzy [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show the help message and exit. Commands : make : Initialize a new django project. remove-poetry : Run this command to remove poetry as a dependency from your project. work : Run multiple commands in parallel. write-env : Update or create a .env file from a .env.template file.","title":"cuzzy"},{"location":"usage/#cuzzy-make","text":"Initialize a new django project. This template makes a lot of assumptions, if you want to make some adjustments to the template you can fork the github repository of this project and make your changes in the templates folder, you can then use the --repo option to specify your Github repository. Custom repository Actually you don't need to fork my repository, you can use this command on any github repository hosting a django project template as long as the template is defined in a templates folder in the root of the repository. Basically, the github repository structure would look something like this: 1 2 3 4 5 ```shell . \u251c\u2500\u2500 templates \u2502 \u2514\u2500\u2500 project_name ``` Usage : 1 $ cuzzy make [ OPTIONS ] PROJECT_NAME Info The authors key of the [tool.poetry] section in the pyproject.toml is set using your git global user configuration. If you haven't set it yet, see this page . Arguments : PROJECT_NAME : [required] Options : -r, --repo TEXT : The github repository to pull the template from. The format to use is username/repo [default: Tobi-De/fuzzy-couscous] -b, --branch [main|tailwind|bootstrap] : The github branch to use. [default: main] -s, --skip-install : Skip dependencies installation. [default: False] --help : Show the help message and exit.","title":"cuzzy make"},{"location":"usage/#cuzzy-remove-poetry","text":"Run this command to remove poetry as a dependency from your project, it updates your pyproject.toml file to use hatch as the build system and can optionally create a virtual environment using virtualenv . Hatch is a modern and extensible Python project manager, it can handle environment creation, package publishing, versioning, etc, everything you need to manage a python project, but here I chose to use it only as a build backend. If you add the --create-virtualenv option, pip-tools will be installed in the created environment, you can use it to manage your dependencies. If you are familiar with hatch, you can easily complete the hatch configurations from the generated pyproject.toml file and use it instead of virtualenv to manage your project. Info The virtualenv is created using your global python interpreter. Warning Be sure to commit your changes before running this command, that way you can undo the changes if something goes wrong or if you simply change your mind Usage : 1 $ cuzzy remove-poetry [ OPTIONS ] Options : -c, --create-virtualenv : Create an environment using virtualenv. [default: False] --help : Show the help message and exit.","title":"cuzzy remove-poetry"},{"location":"usage/#cuzzy-work","text":"This command allows you to run multiple commands simultaneously. Typically, when working with tailwind, you need to run both the django runserver command and the tailwind compile command. This command uses the python package honcho to manage multiple processes. By default, it runs the django server, a redis server (if REDIS_URL is in your environment or .env file), and the tailwind compile and watch command if pytailwindcss is listed as a dependency in your pyproject.toml file. You can specify the commands to run in the [tool.cuzzy] section using the work key. If you define a command with the same name as the default, it will override it. Here are the default commands: 1 2 [tool.cuzzy] work = { server = \"python manage.py migrate && python manage.py runserver --nostatic\" , tailwind = \"tailwindcss -i project_name/static/css/input.css -o project_name/static/css/output.css --watch\" , redis = \"redis-server\" } Usage : 1 $ cuzzy work [ OPTIONS ] Options : --dry-run : Display the list of commands without running them. [default: False] --help : Show the help message and exit. Can be configured via the pyproject.toml file. 1 2 [tool.cuzzy] work = { server = \"python manage.py runserver --nostatic\" , \"tailwind\" = \"poe t\" , \"worker\" = \"python manage.py qcluster\" }","title":"cuzzy work"},{"location":"usage/#cuzzy-write-env","text":"Running this will create a new .env by filling the file with the keys and values from the following options: a env.template file, used if it exists a DEFAULT_VALUES dictionary, internal to the fuzzy-couscous package, contains some default for common keys, DJANGO_DEBUG , DJANGO_SECRET_KEY , etc. a .env file, used if it exists The order defines the priority of the values that are used, which means that the values contained in your original .env file are preserved if the file exists. Usage : 1 $ cuzzy write-env [ OPTIONS ] Options : -f, --fill-missing : Prompt to fill missing values. [default: False] -o, --output-file FILE : The output file path. [default: .env] -p, --postgres-pass : Prompt for the postgres password to use to build the DATABASE_URL . --help : Show the help message and exit.","title":"cuzzy write-env"},{"location":"usage/#cuzzy-rm-migrations","text":"Note This command was previously part of the generated project as a django management command, but I decided to move it to the fuzzy-couscous package since I'm probably the only one using it and I don't want to pollute the generated project with unnecessary code. Remove all migrations for the specified applications directory, intended only for development. Warning This command will delete all your migrations files, be sure to commit your changes before running this command. Usage : 1 $ cuzzy rm-migrations [ OPTIONS ] APPS_DIR Arguments : APPS_DIR : The path to your django apps directory. [required] Options : -e, --exclude TEXT : A file to exclude from the deletion. This option can be repeated.","title":"cuzzy rm-migrations"},{"location":"usage/#cuzzy-htmx","text":"Download the htmx javascript library or one of its extension if specified. You won't have to download htmx or its extensions often but at least if you need it, I think this is an easy way to get the file available locally. Usage : 1 $ cuzzy htmx [ OPTIONS ] VERSION Arguments : VERSION : The version of htmx to download. [default: latest] Options : -e, --extension TEXT : The name of the extension to download. -f, --output-file TEXT : The filename for the htmx download. [default: htmx.min.js] -d, --output-dir DIRECTORY : The directory to write the downloaded file to, default to the current working directory. -w, --web-types : Download the web-types file. --help : Show the help message and exit.","title":"cuzzy htmx"}]}