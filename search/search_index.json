{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#fuzzy-couscous","title":"fuzzy-couscous","text":"<p>![NOTE] Please note that this project, fuzzy-couscous, will no longer receive further updates. Instead, check out its cooler and older brother,  falco at: https://github.com/tobi-de/falco.</p> <p></p> <p> </p> <p>\u2728\ud83d\udcda\u2728 Read the full documentation</p> <p>A cli tool based on django's startproject --template to bootstrap your django projects with a modern stack. The project template is heavily inspired by cookiecutter-django but is meant to be a simpler version. The cli also comes with additional commands to hopefully improve your django development experience.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Django 4+</li> <li>Python 3.10+</li> <li>Frontend: htmx with editor support using web-types</li> <li>Template fragment with django-template-partials</li> <li>Secure production settings, https only.</li> <li>Settings using django-environ</li> <li>Login / signup via django-allauth</li> <li>Login using email instead of username</li> <li>Automatically reload your browser in development via django-browser-reload</li> <li>Better development experience with django-fastdev</li> <li>Amazon SES for production email via Anymail</li> <li>Docker ready for production</li> <li>Optional production cache settings using the <code>CACHE_URL</code> or <code>REDIS_URL</code> environment variables.</li> <li><code>captain-definition</code> for deploying to caprover</li> <li>Sentry for performance/error monitoring</li> <li>Serve static files with Whitenoise</li> <li>Default integration with pre-commit for identifying simple issues before submission to code review</li> <li>Integrated task runner with poethepoet</li> <li>Dependency management using poetry (can be replaced by virtualenv using the <code>remove-poetry</code> command)</li> </ul>"},{"location":"#templates","title":"Templates","text":"<p>I use github branches to create variations of the base template.</p> <ul> <li>main: The base template</li> <li>tailwind: The base template + tailwindcss  via pytailwindcss</li> <li>bootstrap: The base template + bootstrap5 via django-bootstrap5</li> </ul> <p>Note: If some of my decisions about the project template don't make sense to you, read this section of the documentation.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Install the latest version of the package</p> <pre><code>pip install fuzzy-couscous --upgrade\n</code></pre> <p>Initialize a new project</p> <pre><code>cuzzy make project_name\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>Poetry is required (not really, you can set up the environment however you want and install the requirements manually) to set up a virtualenv, install it then run the following:</p> <pre><code>pre-commit install --install-hooks\n</code></pre> <p>Tests can then be run quickly in that environment:</p> <pre><code>pytest\n</code></pre>"},{"location":"#feedback","title":"Feedback","text":"<p>If you have any feedback, please reach out to me at tobidegnon@proton.me or open a discussion.</p>"},{"location":"#contributors","title":"Contributors","text":""},{"location":"codeofconduct/","title":"Code of Conduct","text":""},{"location":"codeofconduct/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"codeofconduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"codeofconduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"codeofconduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"codeofconduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"codeofconduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at tobidegnon@proton.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"codeofconduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"codeofconduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"codeofconduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"codeofconduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"codeofconduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"codeofconduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"deployment/","title":"Deployment","text":"<p>This template was configured to simplify deployment on caprover, since that is what I use 99% of the time.</p> <p>Quote</p> <p>CapRover is an extremely easy to use app/database deployment &amp; web server manager for your NodeJS, Python, PHP, ASP.NET, Ruby, MySQL, MongoDB, Postgres, WordPress (and etc...) applications!</p> <p>Official site</p> <p>CapRover is a self-hosted PaaS solution, think heroku but on your own servers. Nowadays, I tend to prefer PaaS solutions over manual deployment and configuration, as they are easy to use with little configuration to deploy most apps. Software is usually quite a pain to deploy and even though I've gotten better at it over time, I'll always choose a managed solution over manual deployment. Some other options than CapRover are:</p> <ul> <li>Dokku (self hosted)</li> <li>Fly (hosted)</li> <li>Render (hosted)</li> <li>Coolify (self hosted)</li> <li>DigitalOcean App Platform (hosted)</li> <li>AWS Elastic Beanstalk (hosted)</li> <li>Btn (hosted and not ready yet)</li> </ul> <p>Info</p> <p>I recently discovered django-simple-deploy which can configure your django project for some of the alternatives to caprover I listed above.</p> <p>I find that self-hosted solutions are generally cheaper than managed/hosted solutions, but I don't have much experience with managed solutions, so I could be wrong, do your own research and if you can afford it, try them out to see what works best for you.</p> <p>After installing CaProver with the getting started guide, there is not much left to do, create a new application and in the section <code>deployment</code>. configure your application using the third method <code>Method 3: Deploy from Github/Bitbucket/Gitlab</code>.</p> <p>Info</p> <p>If you use github, instead of entering your password directly into the <code>password</code> field, you can use a personal access token, which is a more secure option.</p> <p>Tip</p> <p>Checkout caprover automatic deploy to automate the deployment of your applications.</p>"},{"location":"documentation/","title":"Documentation","text":"<p>This template does not include a documentation setup, but it is very important for most projects (at least it should be) to have a documentation site, especially if you are not working alone. Here are the options I would suggest for setting up a documentation, recently I tend to favor the first one.</p> <ul> <li>Mkdocs with the Material theme</li> <li>Sphinx with the Furo theme</li> </ul> <p>There is a chance that in the future I will include the docs directly in the template but for now here is a quick guide to configure mkdocs with the material theme:</p>"},{"location":"documentation/#installation-and-configurations","title":"Installation and configurations","text":"<p>Copy the configuration below into your <code>pyproject.toml</code> file under the <code>[tool.poetry.dependencies]</code> section.</p> <pre><code>[tool.poetry.group.docs]\noptional = true\n\n[tool.poetry.group.docs.dependencies]\nmkdocs = \"^1.4.2\"\nmkdocs-material = \"^8.5.10\"\nmkdocs-material-extensions = \"^1.1.1\"\nmkdocs-include-markdown-plugin = \"3.9.1\"\n</code></pre> <p>Install the new dependencies.</p> <pre><code>poetry install --with docs\n</code></pre> <p>Create your new mkdocs site.</p> <pre><code>mkdocs new .\n</code></pre> <p>Update the <code>mkdocs.yml</code> file to specify the material theme, your configuration should look like this:</p> <pre><code>site_name: My Docs # change this to the name of your project\ntheme:\n  name: material\n</code></pre> <p>Run the documentation site locally</p> <pre><code>mkdocs serve\n</code></pre> <p>If you noticed, the dependencies added above via the section <code>[tool.poetry.group.docs.dependencies]</code> include more than just mkdocs and the material theme, specifically :</p> <ul> <li>mkdocs-material-extensions: Markdown extension resources for MkDocs for Material</li> <li>mkdocs-include-markdown-plugin:  Include other markdown files in your mkdocs site</li> </ul> <p>For a complete example of how I configure them in projects, see this configuration file.</p>"},{"location":"documentation/#deploy-your-documentation","title":"Deploy your documentation","text":"<p>Mkdocs can turn your documentation into a static site that you can host anywhere, netlify, github pages, etc. To build your site, run the command below and you will have a new <code>site</code> directory at the root of your project:</p> <pre><code>mkdocs build\n</code></pre> <p>This folder contains everything that is necessary to deploy your static site.</p> <p>If you choose the github pages route, you can automate the process with github actions, the official mkdocs-material documentation explains how to do it. To use github actions, you will probably need a <code>requirements.txt</code> file, you can generate one with only what is needed to build the docs with the command below.</p> <pre><code>poetry export -f requirements.txt --output docs/requirements.txt --without-hashes --only docs\n</code></pre> <p>Read the mkdocs and mkdocs-material docs for more advanced configurations and details on what is possible.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022 Tobi DEGNON</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"project/","title":"Project","text":"<p>This page gives more details about the structure, layouts and packages used for the project template and therefore available in your generated project.</p>"},{"location":"project/#login-via-email-instead-of-username","title":"Login via email instead of username","text":"<p>I completely removed the <code>username</code> field from the <code>User</code> model and replaced it with the <code>email</code> field as the user unique identifier. This <code>email</code> field is what I configured as the login field via django-allauth. More often then not when I create a new django project I need to use something other than the <code>username</code> field provided by django as the unique identifier of the user, and the <code>username</code> field just becomes an annoyance to deal with. It is also more common nowadays for modern web and mobile applications to rely on a unique identifier such as an email address or phone number instead of a username. The project also includes django-improved-user which replaces the common <code>first_name</code> and <code>last_name</code> used for user details with <code>full_name</code> and the <code>short_name</code> fields. If you want to know the reasoning behind this, read the project rationale. Currently, the latest version of <code>django-improved-user</code> that works without problems is an alpha version (v2.0a2). This can be annoying to deal with when updating dependencies, you can get the same result as I just described with the django-authtools package.</p> <p>Don't ask for what you don't need</p> <p>Make sure you need <code>first_name</code> - <code>last_name</code> or <code>short_name</code> - <code>full_name</code> before asking your users for this information.</p> <p>rezaid.co.uk</p> <p>The less customer information you hold, the more your chances are of becoming GDPR compliant. However, this does not mean that you let go of relevant data. It is important is to always ask: Do you need it?</p> <p>If you ever decide you need them you can always request them later</p> <p>If on the other hand you don't agree with what I just wrote or for the particular project you are currently working on my configuration doesn't work for you, removing django-improved-user should be an easy change.</p> <p>First update the <code>User</code> models to inherit from django <code>AbstractUser</code> instead of the django-improved-ser one.</p> <pre><code># users/models.py\n\nfrom django.contrib.auth.models import AbstractUser\n\nclass User(AbstractUser):\n    pass\n</code></pre> <p>Then delete the <code>forms.py</code>, <code>admin.py</code> and <code>migrations/0001_initial.py</code>  files in the <code>users</code> app. With that you should be good to go, if you want something a little more complete to start with you can grab some code from the cookiecutter-django users app.</p>"},{"location":"project/#djangofastdev","title":"DjangoFastDev","text":"<p>Occasionally you may see a <code>FastDevVariableDoesNotExist</code> error, this exception is thrown during template rendering by django-fastdev when you try to access a variable that is not defined in the context context of the view associated with that template. This is intended to help you avoid typos and small errors that will have you scratching your head for hours, read the project readme if you want more reasons to why it make sense to use it. But since this can be annoying for some people, you can disable it by removing <code>django-fastdev</code> entirely or by commenting out the django-fastdev application in the <code>settings.py</code> file.</p> <pre><code>THIRD_PARTY_APPS = [\n    ...\n    # 'django_fastdev',\n]\n</code></pre>"},{"location":"project/#dependencies-management","title":"Dependencies management","text":"<p>If you are using poetry then you probably already knows what to do, using poetry is pretty straightforward and that's why I like it. With poetry the simplest workflow looks something like this:</p> <pre><code>poetry install\npoetry add package_name\npoetry remove package_name\n</code></pre> <p>Updating your dependencies</p> <p>I recommend the poetry-plugin-up to easily update your dependencies. I used to include poetryup in the project template, but that has been deprecated in favor of the new up plugin.</p> <p>If on the other hand you choose to remove poetry using the <code>cuzzy remove-poetry</code> and additionally created a virtualenv with the <code>-c</code> option, then I've added a few things that might be useful to you.</p>"},{"location":"project/#the-pyprojecttoml-file","title":"The <code>pyproject.toml</code> file","text":"<p>When I first started using poetry I thought this file  was a poetry specific thing, but it turns out that it is not. The <code>pyproject.toml</code> file is a python standard introduced to unify and simplify python project packaging and configurations. The pip documentation gives much more details on this than I can cover here, so I will just link to it here. A loot of tools in the python ecosystem support it and it seems this is what we are going to be using in the future so I've kept it.</p>"},{"location":"project/#pip-tools","title":"Pip-tools","text":"<p>When you run the <code>remove-poetry</code> with the <code>-c</code> option which create a virtual environment for you, you will also get <code>pip-tools</code> and <code>hatch</code> installed. Pip-tools is a set of tools to help you manage your dependencies. As the name suggests, it is based on pip. The most basic workflow will look something like this:</p> <p>Add a new package in your <code>pyproject.toml</code> (or <code>requirements.ini</code> if you prefer) file and run <code>pip-compile</code> to generate a new <code>requirements.txt</code> file. <pre><code>pip-tools compile -o requirements.txt pyproject.toml --resolver=backtracking\n</code></pre> The command also take an <code>--extra</code> option to specify dependencies groups, more infos on their github readme.</p> <p><pre><code>pip-sync\n</code></pre> <code>pip-sync</code> will synchronize your virtual environment with the <code>requirements.txt</code> file, this means that any package in the virtual environment that is not in the <code>requirements.txt</code> file will be removed. You can also just use a good old <code>python -m pip install -r requirements.txt</code> to install the dependencies.</p>"},{"location":"project/#hatch","title":"Hatch","text":"<p>Installed at the same time as  <code>pip-tools</code>, Hatch is the build system specified in the <code>pyproject.toml</code> file. Since you are probably not going to package and publish your django project you don't really need it, but <code>pip-tools</code> does need a build system defined to work.</p> <p>Official hatch documentation</p> <p>Hatch is a modern, extensible Python project manager.</p> <p>Hatch does everything you need to manage a python project, dependencies, virtual environments, packaging, publishing, scripts, etc and it also uses the <code>pyproject.toml</code> file. The one available after the <code>remove-poetry</code> command is a good base to start using hatch.</p> <p>Just run <pre><code>hatch env create\n</code></pre></p> <p>Read the hatch documentation for more infos.</p>"},{"location":"tips/","title":"Tips","text":"<p>This section gathers tips, copy and paste configurations and package recommendations that I use quite often in my projects to solve specific problems.</p>"},{"location":"tips/#settings","title":"Settings","text":"<p>If there is a setting in <code>settings.py</code> or elsewhere that you don't understand, go to the official django settings reference page and press Ctrl + F to search for it. I used the django-production package to configure the production settings which I then customized. I have removed the package as a dependency, but I advise you to go and check for yourself what is available.</p>"},{"location":"tips/#dynamic-web-pages","title":"Dynamic web pages","text":"<p>HTMX for simple interactive elements, django-unicorn if I need something more integrated with django. It's not a binary choice, you can use both, the main advantage for me is the simplicity compared to a frontend javascript framework.</p> <p>Note</p> <p>If you use htmx boost + debug toolbar (already included in the template), you will need this.</p>"},{"location":"tips/#task-queues-and-schedulers","title":"Task queues and schedulers","text":"<p>Task queues are used to offload tasks to a dedicated worker process when the processing of those tasks does not fit into a traditional request-response cycle. Basically, if you need to do something that might take too long to process and whose result does not need to be shown immediately to the user, you use a queue manager. Schedulers are used to periodically run tasks. There are many options available in the django third-party ecosystem, some focus solely on providing a task queue, others are just schedulers and many of them provide both in one package. You can also search for purely python solutions and integrate them into your django project yourself.</p> <p>I prefer options that do not require additional infrastructure (redis, rabbitmq, etc.) for simple tasks. For more complex tasks, I tend to choose a solution that supports redis as a task broker.</p> <p>Doesn't require setup of external tools, redis, rabbitmq, etc..</p> <ul> <li>django-q2 : Task queue + scheduler</li> <li>django-chard : Task queue</li> <li>django-pgpubsub : Task queue</li> <li>procrastinate : Task queue + scheduler</li> <li>rocketry : Scheduler</li> </ul> <p>Require the setup of external tools, redis, rabbitmq, etc.</p> <ul> <li>django-dramatiq : Task queue</li> <li>django-rq : Task queue + scheduler via django-rq-scheduler</li> <li>wakaq : Task queue + scheduler</li> </ul> <p>Note</p> <p>The order matters, that's the order in which I would choose one of these packages.</p> <p>If you are using one of these you might want an automatic reload feature when files changes, you can use the <code>hupper</code> python package for that purpose. If your project was generated with fuzzy-couscous then it is already declared as a dev dependencies.</p>"},{"location":"tips/#media-storage","title":"Media storage","text":"<p>Media files in django usually refer to files uploaded by users, profile pictures, product images, etc. I usually manage my media files using django-storages. Here is how I set it up.</p> <pre><code># core/storages.py\nfrom storages.backends.s3boto3 import S3Boto3Storage\n\nclass MediaRootS3Boto3Storage(S3Boto3Storage):\n    location = \"media\"\n    file_overwrite = False\n\n\n# settings.py - production settings\nAWS_ACCESS_KEY_ID = env(\"DJANGO_AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = env(\"DJANGO_AWS_SECRET_ACCESS_KEY\")\nAWS_STORAGE_BUCKET_NAME = env(\"DJANGO_AWS_STORAGE_BUCKET_NAME\")\nDEFAULT_FILE_STORAGE = \"project_name.core.storages.MediaRootS3Boto3Storage\"\nMEDIA_URL = f\"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/media/\"\n</code></pre>"},{"location":"tips/#database-backup","title":"Database backup","text":"<p>Whenever possible, take advantage of a fully managed database solution, they usually offer automatic backup of your databases. In my opinion, this is the best option if you don't want to deal with the hassle of managing your own database.</p> <ul> <li>Amazon RDS</li> <li>Linode Managed Databases</li> <li>DigitalOcean Managed Databases</li> <li>Heroku postgres</li> </ul> <p>For specific postgresql options, see their hosting support page.</p> <p>However, if for some reason you want / need to manage your database yourself and just want an automatic backup solution then django-dbbackup is what you need. You can use one of the scheduling packages discussed above to periodically run the backup command.</p>"},{"location":"tips/#health-check-your-django-project","title":"Health check your django project","text":"<p>Health check is about making sure that your django application and related services are always available / running. My go-to package for this is django-health-check. After installing and configuring django-health-check, you need to associate it with an uptime monitoring service, this is the service that will periodically call your health-check endpoint to make sure everything is fine. Here is a list of available options.</p> <ul> <li>upptime</li> <li>uptime-kuma</li> <li>uptimerobot</li> <li>better-uptime</li> <li>glitchtip</li> </ul> <p>Read more on the health check pattern here.</p>"},{"location":"tips/#extra-that-i-havent-tried-myself-yet","title":"Extra that I haven't tried myself yet","text":"<ul> <li>django-linear-migrations: Read introduction post</li> <li>django-read-only: Disable Django database writes.</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>This page describe how to use the all available commands.</p>"},{"location":"usage/#intro","title":"Intro","text":"<p>Note</p> <p><code>fuzzy-couscous</code> is the name of the cli installed when you install this package but since it's a bit annoying to type it every time, there is the short version <code>cuzzy</code> that you can use instead. The short version is the one that is used throughout the documentation for the examples.</p> <p>Since this template uses django's startproject --template, you can easily clone the project on your computer and generate a django project by using the command <code>django-admin</code> and specifying the <code>fuzzy-couscous/templates/project_name</code> folder as the template. The final command is a bit long, that's why I made this cli to simplify the process. The cli command is installed together with the package.</p> Install the package <pre><code>pip install fuzzy-couscous --upgrade\n</code></pre>"},{"location":"usage/#cuzzy","title":"<code>cuzzy</code>","text":"<p>Usage:</p> <pre><code>$ cuzzy [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show the help message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>make</code>: Initialize a new django project.</li> <li><code>remove-poetry</code>:  Run this command to remove poetry as a dependency from your project.</li> <li><code>work</code>: Run multiple commands in parallel.</li> <li><code>write-env</code>: Update or create a .env file from a .env.template file.</li> </ul>"},{"location":"usage/#cuzzy-make","title":"<code>cuzzy make</code>","text":"<p>Initialize a new django project. This template makes a lot of assumptions, if you want to make some adjustments to the template you can fork the github repository of this project and make your changes in the <code>templates</code> folder, you can then use the <code>--repo</code> option to specify your Github repository.</p> Custom repository <p>Actually you don't need to fork my repository, you can use this command on any github repository hosting a django project template as long as the template is defined in a <code>templates</code> folder in the root of the repository. Basically, the github repository structure would look something like this:</p> <pre><code>```shell\n.\n\u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 project_name\n```\n</code></pre> <p>Usage:</p> <pre><code>$ cuzzy make [OPTIONS] PROJECT_NAME\n</code></pre> <p>Info</p> <p>The authors key of the <code>[tool.poetry]</code> section in the <code>pyproject.toml</code> is set using your git global user configuration. If you haven't set it yet, see this page.</p> <p>Arguments:</p> <ul> <li><code>PROJECT_NAME</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>-r, --repo TEXT</code>: The github repository to pull the template from. The format to use   is <code>username/repo</code> [default: Tobi-De/fuzzy-couscous]</li> <li><code>-b, --branch [main|tailwind|bootstrap]</code>: The github branch to use. [default: main]</li> <li><code>-s, --skip-install</code>: Skip dependencies installation. [default: False]</li> <li><code>--help</code>: Show the help message and exit.</li> </ul>"},{"location":"usage/#cuzzy-remove-poetry","title":"<code>cuzzy remove-poetry</code>","text":"<p>Run this command to remove poetry as a dependency from your project, it updates your pyproject.toml file to use hatch as the build system and can optionally create a virtual environment using virtualenv. Hatch is a modern and extensible Python project manager, it can handle environment creation, package publishing, versioning, etc, everything you need to manage a python project, but here I chose to use it only as a build backend. If you add the <code>--create-virtualenv</code> option, pip-tools will be installed in the created environment, you can use it to manage your dependencies. If you are familiar with hatch, you can easily complete the hatch configurations from the generated <code>pyproject.toml</code> file and use it instead of virtualenv to manage your project.</p> <p>Info</p> <p>The virtualenv is created using your global python interpreter.</p> <p>Warning</p> <p>Be sure to commit your changes before running this command, that way you can undo the changes if something goes wrong or if you simply change your mind</p> <p>Usage:</p> <pre><code>$ cuzzy remove-poetry [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-c, --create-virtualenv</code>: Create an environment using virtualenv. [default: False]</li> <li><code>--help</code>: Show the help message and exit.</li> </ul>"},{"location":"usage/#cuzzy-work","title":"<code>cuzzy work</code>","text":"<p>This command allows you to run multiple commands simultaneously. Typically, when working with tailwind, you need to run both the django <code>runserver</code> command and the tailwind <code>compile</code> command. This command uses the python package honcho to manage multiple processes. By default, it runs the django server, a redis server (if <code>REDIS_URL</code> is in your environment or <code>.env</code> file), the tailwind compile and watch command if <code>pytailwindcss</code> is listed as a dependency in your <code>pyproject.toml</code> file.  It also runs the qcluster command from django-q2 (if defined in your dependencies). Additionally, if hupper is listed as a development dependency, it uses that to run the qcluster command.. You can specify the commands to run in the <code>[tool.cuzzy]</code> section using the <code>work</code> key. If you define a command with the same name as the default, it will override it. Here are the default commands:</p> <p><pre><code>[tool.cuzzy]\nwork = { server = \"python manage.py migrate &amp;&amp; python manage.py runserver --nostatic\", tailwind = \"tailwindcss -i project_name/static/css/input.css -o project_name/static/css/output.css --watch\", redis = \"redis-server\" }\n</code></pre> Usage:</p> <pre><code>$ cuzzy work [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--dry-run</code>: Display the list of commands without running them. [default: False]</li> <li><code>--help</code>: Show the help message and exit.</li> </ul> <p>Can be configured via the <code>pyproject.toml</code> file.</p> <pre><code>[tool.cuzzy]\nwork = { server = \"python manage.py runserver --nostatic\", \"tailwind\" = \"poe t\", \"worker\" = \"python manage.py qcluster\" }\n</code></pre>"},{"location":"usage/#cuzzy-write-env","title":"<code>cuzzy write-env</code>","text":"<p>Running this will create a new <code>.env</code> by filling the file with the keys and values from the following options:</p> <ol> <li>a <code>env.template</code> file, used if it exists</li> <li>a <code>DEFAULT_VALUES</code> dictionary, internal to the <code>fuzzy-couscous</code> package, contains some default for common    keys, <code>DJANGO_DEBUG</code>, <code>DJANGO_SECRET_KEY</code>, etc.</li> <li>a <code>.env</code> file, used if it exists</li> </ol> <p>The order defines the priority of the values that are used, which means that the values contained in your original <code>.env</code> file are preserved if the file exists.</p> <p>Usage:</p> <pre><code>$ cuzzy write-env [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-f, --fill-missing</code>: Prompt to fill missing values. [default: False]</li> <li><code>-o, --output-file FILE</code>: The output file path. [default: .env]</li> <li><code>-p, --postgres-pass</code>: Prompt for the postgres password to use to build the <code>DATABASE_URL</code>.</li> <li><code>--help</code>: Show the help message and exit.</li> </ul>"},{"location":"usage/#cuzzy-rm-migrations","title":"<code>cuzzy rm-migrations</code>","text":"<p>Note</p> <p>This command was previously part of the generated project as a django management command, but I decided to move it to the <code>fuzzy-couscous</code> package since I'm probably the only one using it and I don't want to pollute the generated project with unnecessary code.</p> <p>Remove all migrations for the specified applications directory, intended only for development.</p> <p>Warning</p> <p>This command will delete all your migrations files, be sure to commit your changes before running this command.</p> <p>Usage:</p> <pre><code>$ cuzzy rm-migrations [OPTIONS] APPS_DIR\n</code></pre> <p>Arguments:</p> <ul> <li><code>APPS_DIR</code>: The path to your django apps directory. [required]</li> </ul> <p>Options:</p> <ul> <li><code>-e, --exclude TEXT</code>: A file to exclude from the deletion. This option can be repeated.</li> </ul>"},{"location":"usage/#cuzzy-htmx","title":"<code>cuzzy htmx</code>","text":"<p>Download the htmx javascript library or one of its extension if specified. You won't have to download htmx or its extensions often but at least if you need it, I think this is an easy way to get the file available locally.</p> <p>Usage:</p> <pre><code>$ cuzzy htmx [OPTIONS] VERSION\n</code></pre> <p>Arguments:</p> <ul> <li><code>VERSION</code>: The version of htmx to download. [default: latest]</li> </ul> <p>Options:</p> <ul> <li><code>-e, --extension TEXT</code>: The name of the extension to download.</li> <li><code>-f, --output-file TEXT</code>: The filename for the htmx download. [default: htmx.min.js]</li> <li><code>-d, --output-dir DIRECTORY</code>: The directory to write the downloaded file to, default to the current working directory.</li> <li><code>-w, --web-types</code>: Download the web-types file.</li> <li><code>--help</code>: Show the help message and exit.</li> </ul>"}]}